{
    "result": [
        {
            "filepath": "repositories/applicant_repository.py",
            "code": "from uuid import UUID\nfrom typing import Iterable\nfrom sqlalchemy import select\nfrom storage.sqlalchemy.connection_proxy import AlchemyAsyncConnectionProxy\nfrom repositories.base_alchemy_repository import BaseAlchemyRepository\nfrom models.domain.aggregate_roots import Applicant\nfrom models.domain.value_objects import UserInfo, Response\nfrom storage.sqlalchemy.tables import User, Response as ResponseORM\n\n\nclass ApplicantRepository(BaseAlchemyRepository):\n    def __init__(self, connection_proxy: AlchemyAsyncConnectionProxy):\n        super().__init__(connection_proxy)\n\n    async def create(self, *args, **kwargs) -> None:\n        session = self.connection_proxy.connect()\n        user_info = kwargs.get('user_info')\n        applicant = User(\n            email=user_info.email,\n            name=user_info.name,\n            hashed_password=user_info.hashed_password,\n            is_company=False,\n            created_at=user_info.created_at\n        )\n        session.add(applicant)\n\n    async def delete(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        applicant_id = kwargs.get('id_')\n        stmt = select(User).where(User.id == applicant_id)\n        result = await session.execute(stmt)\n        applicant = result.scalars().first()\n        if applicant:\n            await session.delete(applicant)\n            return True\n        return False\n\n    async def list(self, *args, **kwargs) -> Iterable[any]:\n        session = self.connection_proxy.connect()\n        stmt = select(User).where(User.is_company == False)\n        result = await session.execute(stmt)\n        return [Applicant(id_=user.id, user_info=UserInfo(\n            email=user.email,\n            name=user.name,\n            hashed_password=user.hashed_password,\n            is_company=user.is_company,\n            created_at=user.created_at\n        )) for user in result.scalars().all()]\n\n    async def retrieve(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        applicant_id = kwargs.get('id_')\n        stmt = select(User).where(User.id == applicant_id)\n        result = await session.execute(stmt)\n        user = result.scalars().first()\n        if user:\n            return Applicant(id_=user.id, user_info=UserInfo(\n                email=user.email,\n                name=user.name,\n                hashed_password=user.hashed_password,\n                is_company=user.is_company,\n                created_at=user.created_at\n            ))\n        return None\n\n    async def update(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        applicant_id = kwargs.get('id_')\n        user_info = kwargs.get('user_info')\n        stmt = select(User).where(User.id == applicant_id)\n        result = await session.execute(stmt)\n        user = result.scalars().first()\n        if user:\n            user.email = user_info.email\n            user.name = user_info.name\n            user.hashed_password = user_info.hashed_password\n            return True\n        return False\n\n    async def add_response(self, job_id: UUID, response: Response) -> None:\n        session = self.connection_proxy.connect()\n        response_orm = ResponseORM(\n            job_id=job_id,\n            user_id=response.user_id,\n            message=response.message\n        )\n        session.add(response_orm)\n\n    async def delete_response(self, job_id: UUID, response: Response) -> None:\n        session = self.connection_proxy.connect()\n        stmt = select(ResponseORM).where(\n            ResponseORM.job_id == job_id,\n            ResponseORM.user_id == response.user_id,\n            ResponseORM.message == response.message\n        )\n        result = await session.execute(stmt)\n        response_orm = result.scalars().first()\n        if response_orm:\n            await session.delete(response_orm)"
        },
        {
            "filepath": "repositories/company_repository.py",
            "code": "from uuid import UUID\nfrom typing import Iterable\nfrom sqlalchemy import select\nfrom storage.sqlalchemy.connection_proxy import AlchemyAsyncConnectionProxy\nfrom repositories.base_alchemy_repository import BaseAlchemyRepository\nfrom models.domain.aggregate_roots import Company\nfrom models.domain.value_objects import UserInfo\nfrom models.domain.entities import Job\nfrom storage.sqlalchemy.tables import User, Job as JobORM\n\n\nclass CompanyRepository(BaseAlchemyRepository):\n    def __init__(self, connection_proxy: AlchemyAsyncConnectionProxy):\n        super().__init__(connection_proxy)\n\n    async def create(self, *args, **kwargs) -> None:\n        session = self.connection_proxy.connect()\n        user_info = kwargs.get('user_info')\n        company = User(\n            email=user_info.email,\n            name=user_info.name,\n            hashed_password=user_info.hashed_password,\n            is_company=True,\n            created_at=user_info.created_at\n        )\n        session.add(company)\n\n    async def delete(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        company_id = kwargs.get('id_')\n        stmt = select(User).where(User.id == company_id)\n        result = await session.execute(stmt)\n        company = result.scalars().first()\n        if company:\n            await session.delete(company)\n            return True\n        return False\n\n    async def list(self, *args, **kwargs) -> Iterable[any]:\n        session = self.connection_proxy.connect()\n        stmt = select(User).where(User.is_company == True)\n        result = await session.execute(stmt)\n        return [Company(id_=user.id, user_info=UserInfo(\n            email=user.email,\n            name=user.name,\n            hashed_password=user.hashed_password,\n            is_company=user.is_company,\n            created_at=user.created_at\n        )) for user in result.scalars().all()]\n\n    async def retrieve(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        company_id = kwargs.get('id_')\n        stmt = select(User).where(User.id == company_id)\n        result = await session.execute(stmt)\n        user = result.scalars().first()\n        if user:\n            return Company(id_=user.id, user_info=UserInfo(\n                email=user.email,\n                name=user.name,\n                hashed_password=user.hashed_password,\n                is_company=user.is_company,\n                created_at=user.created_at\n            ))\n        return None\n\n    async def update(self, *args, **kwargs) -> any:\n        session = self.connection_proxy.connect()\n        company_id = kwargs.get('id_')\n        user_info = kwargs.get('user_info')\n        stmt = select(User).where(User.id == company_id)\n        result = await session.execute(stmt)\n        user = result.scalars().first()\n        if user:\n            user.email = user_info.email\n            user.name = user_info.name\n            user.hashed_password = user_info.hashed_password\n            return True\n        return False\n\n    async def activate_job(self, job_id: UUID) -> None:\n        session = self.connection_proxy.connect()\n        stmt = select(JobORM).where(JobORM.id == job_id)\n        result = await session.execute(stmt)\n        job = result.scalars().first()\n        if job:\n            job.is_active = True\n\n    async def add_job(self, job: Job) -> None:\n        session = self.connection_proxy.connect()\n        job_orm = JobORM(\n            id=job.id,\n            user_id=job.company_id,\n            title=job.title,\n            description=job.description,\n            salary_from=job.salary_from,\n            salary_to=job.salary_to,\n            is_active=job.is_active,\n            created_at=job.created_at\n        )\n        session.add(job_orm)\n\n    async def archive_job(self, job_id: UUID) -> None:\n        session = self.connection_proxy.connect()\n        stmt = select(JobORM).where(JobORM.id == job_id)\n        result = await session.execute(stmt)\n        job = result.scalars().first()\n        if job:\n            job.is_active = False\n\n    async def delete_job(self, job_id: UUID) -> None:\n        session = self.connection_proxy.connect()\n        stmt = select(JobORM).where(JobORM.id == job_id)\n        result = await session.execute(stmt)\n        job = result.scalars().first()\n        if job:\n            await session.delete(job)\n\n    async def update_job(self, job_id: UUID, updated_job: Job) -> None:\n        session = self.connection_proxy.connect()\n        stmt = select(JobORM).where(JobORM.id == job_id)\n        result = await session.execute(stmt)\n        job = result.scalars().first()\n        if job:\n            job.title = updated_job.title\n            job.description = updated_job.description\n            job.salary_from = updated_job.salary_from\n            job.salary_to = updated_job.salary_to\n            job.is_active = updated_job.is_active"
        }
    ]
}
